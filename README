This library aims to alleviate the burden of
reasoning of substitution and alpha equality when formalizing
languages with binders in a nominal style.
By nominal style, I mean that bound variables have names.

Like Ott[1], the input to this library is a Context Free Grammar annotated
with Variable binding information.
However, there is no external "code-generation" step to get Coq code from the input.
The input specification language itself is formalized as a record type (CFGV)
in Coq.
So, the input grammar is specified in Coq
as a member of the CFGV type.
The rest of this library is parametrized by a CFGV.
This includes definition of terms, alpha equality, substitution, free variables
and many proofs about them.
Once you construct a member of our CFGV type that corresponds
to your language, you
can instantiate this library with this member to get the
above mentioned definitions and proofs for free.

More information is available in the following paper:
Abhishek Anand and Vincent Rahli. "A Generic Approach to Proofs about Substitution". LFMTP 2014
http://www.nuprl.org/html/CFGVLFMTP2014/CFGV.pdf

The Coq sources are available on github:
https://github.com/aa755/CFGV
A Makefile is supplied. Running make succeeds with Coq version 8.4pl2.
See lastBuild.log.
After reading the paper, the following webpage might be helful in finding the
code snippets mentioned in the paper.
http://www.nuprl.org/html/CFGVLFMTP2014/


If you have any question, comment, or you run into an issue,
please feel free to create an issue at:
https://github.com/aa755/CFGV/issues

For most applications, [squiggle-eq](https://github.com/aa755/SquiggleEq/) a much simpler library (but less general/expressive) based on similar principles suffices.

[1] : Sewell, Peter, Francesco Zappa Nardelli, Scott Owens, Gilles Peskine, Thomas Ridge, Susmit Sarkar, and Rok StrnišA. 2010. “Ott: Effective Tool Support for the Working Semanticist.” JFP 20 (01): 71. doi:10.1017/S0956796809990293.

